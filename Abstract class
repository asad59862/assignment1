#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node{
   Node* next;
   Node* prev;
   int value;
   int key;
   Node(Node* p, Node* n, int k, int val):prev(p),next(n),key(k),value(val){};
   Node(int k, int val):prev(NULL),next(NULL),key(k),value(val){};
};

class Cache{
   
   protected: 
   map<int,Node*> mp; //map the key to the node in the linked list
   int cp;  //capacity
   Node* tail; // double linked list tail pointer
   Node* head; // double linked list head pointer
   virtual void set(int, int) = 0; //set function
   virtual int get(int) = 0; //get function

};


class LRUCache : public Cache {
public:
    LRUCache(int capacity) {
        cp = capacity;
        head = NULL;
        tail = NULL;
    }

    
    void moveToHead(Node* node) {
        if (node == head) return; 

        
        if (node->prev) node->prev->next = node->next;
        if (node->next) node->next->prev = node->prev;

       
        if (node == tail) tail = node->prev;

  
        node->next = head;
        node->prev = NULL;

        if (head) head->prev = node;
        head = node;

        if (!tail) tail = head;
    }

   
    void removeTail() {
        if (!tail) return;

        mp.erase(tail->key); 
        if (tail->prev) {
            tail = tail->prev;
            delete tail->next;
            tail->next = NULL;
        } else {
            
            delete tail;
            tail = NULL;
            head = NULL;
        }
    }

    int get(int key) override {
        if (mp.find(key) == mp.end()) {
            return -1; // Not found
        }

        Node* node = mp[key];
        moveToHead(node);
        return node->value;
    }

    void set(int key, int value) override {
        if (mp.find(key) != mp.end()) {
            
            Node* node = mp[key];
            node->value = value;
            moveToHead(node);
        } else {
           
            Node* newNode = new Node(key, value);

            if (mp.size() == cp) {
                
                removeTail();
            }

         
            newNode->next = head;
            if (head) head->prev = newNode;
            head = newNode;

            if (!tail) tail = head; 

            mp[key] = newNode;
        }
    }
};




int main() {
   int n, capacity,i;
   cin >> n >> capacity;
   LRUCache l(capacity);
   for(i=0;i<n;i++) {
      string command;
      cin >> command;
      if(command == "get") {
         int key;
         cin >> key;
         cout << l.get(key) << endl;
      } 
      else if(command == "set") {
         int key, value;
         cin >> key >> value;
         l.set(key,value);
      }
   }
   return 0;
}

